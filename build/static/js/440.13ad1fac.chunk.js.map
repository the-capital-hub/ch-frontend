{"version":3,"file":"static/js/440.13ad1fac.chunk.js","mappings":"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","sources":["pages/StartUp/Notifications/Notifications.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./Notifications.scss\";\r\n// import ComingSoon from \"../../../components/ComingSoon/ComingSoon\";\r\nimport MaxWidthWrapper from \"../../../components/Shared/MaxWidthWrapper/MaxWidthWrapper\";\r\nimport { setPageTitle } from \"../../../Store/features/design/designSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import ThreeODotIcon from \"../../../Images/ThreeDotIcon.svg\";\r\nimport {\r\n  fetchNotificationsAPI,\r\n  // markAllNotificationsReadAPI,\r\n  // markNotificationAsReadAPI,\r\n} from \"../../../Service/user\";\r\nimport {\r\n  selectIsInvestor,\r\n  selectLoggedInUserId,\r\n} from \"../../../Store/features/user/userSlice\";\r\nimport SpinnerBS from \"../../../components/Shared/Spinner/SpinnerBS\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PiDotsThreeBold } from \"react-icons/pi\";\r\n\r\nfunction Notifications() {\r\n  const dispatch = useDispatch();\r\n  const [selectedTab, setSelectedTab] = useState(\"All\"); // Default to \"received\"\r\n  const [loading, setLoading] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const loggedInUserId = useSelector(selectLoggedInUserId);\r\n  const isInvestor = useSelector(selectIsInvestor);\r\n  // const isInvestor = loggedInUser.isInvestor === \"true\";\r\n\r\n  useEffect(() => {\r\n    document.title = \"Notifications | The Capital Hub\";\r\n    dispatch(setPageTitle(\"Notifications\"));\r\n  }, [dispatch]);\r\n\r\n  const handleTabChange = (tab) => {\r\n    setSelectedTab(tab);\r\n  };\r\n\r\n  const fetchNotifications = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetchNotificationsAPI(loggedInUserId);\r\n      // console.log(loggedInUser?._id);\r\n      setNotifications(res.data);\r\n    } catch (error) {\r\n      console.log(\"Error loading notifications: \", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const notificationType = (type, _id) => {\r\n    switch (type) {\r\n      case \"connectionRequest\": {\r\n        return \"sent you a connection request\";\r\n      }\r\n      case \"connectionAccepted\": {\r\n        return \"accepted your connection request\";\r\n      }\r\n      case \"postLiked\": {\r\n        return (\r\n          <span className=\"notif-link\">\r\n            liked your{\" \"}\r\n            <Link\r\n              to={isInvestor ? `/investor/post/${_id}` : `/posts/${_id}`}\r\n              className=\"fw-bold\"\r\n            >\r\n              post\r\n            </Link>\r\n          </span>\r\n        );\r\n      }\r\n      case \"postShared\": {\r\n        return (\r\n          <span className=\"notif-link\">\r\n            shared your{\" \"}\r\n            <Link\r\n              to={isInvestor ? `/investor/post/${_id}` : `/posts/${_id}`}\r\n              className=\"fw-bold\"\r\n            >\r\n              post\r\n            </Link>\r\n          </span>\r\n        );\r\n      }\r\n      case \"postCommented\": {\r\n        return (\r\n          <span className=\"notif-link\">\r\n            commented on your{\" \"}\r\n            <Link\r\n              to={isInvestor ? `/investor/post/${_id}` : `/posts/${_id}`}\r\n              className=\"fw-bold\"\r\n            >\r\n              post\r\n            </Link>\r\n          </span>\r\n        );\r\n      }\r\n      case \"meetingRequest\": {\r\n        return (\r\n          <span className=\"notif-link\">\r\n            You have a new\r\n            <Link to={`/investor/my-schedule?view=true`} className=\"fw-bold\">\r\n              meeting\r\n            </Link>\r\n            request\r\n          </span>\r\n        );\r\n      }\r\n      default: {\r\n        return \"\";\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <MaxWidthWrapper>\r\n      <div className=\"notificaitons_container\">\r\n        {/* <ComingSoon /> */}\r\n        {/* <div className=\"d-flex gap-md-3 gap-2 py-4  px-2 mt-3 data_selector\">\r\n          <button\r\n            className={`fs-6 rounded-pill py-md-3 px-md-5 py-2 px-4 ${\r\n              selectedTab === \"All\"\r\n                ? `active${isInvestor ? \"investors\" : \"startup\"}`\r\n                : \"\"\r\n            } `}\r\n            onClick={() => handleTabChange(\"All\")}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className={` fs-6  rounded-pill py-md-3 px-md-5 py-2 px-4 ${\r\n              selectedTab === \"MY Post\"\r\n                ? `active${isInvestor ? \"investors\" : \"startup\"}`\r\n                : \"\"\r\n            }`}\r\n            onClick={() => handleTabChange(\"MY Post\")}\r\n          >\r\n            MY Post\r\n          </button>\r\n        </div> */}\r\n        <div className=\"message_section px-xxl-4 rounded-4 px-3\">\r\n          <div className=\"row p-0\">\r\n            <div className=\"col-12 mt-2 box p-0\">\r\n              {!loading ? (\r\n                notifications.length ? (\r\n                  <>\r\n                    {notifications\r\n                      // .slice(0, 5)\r\n                      .map(\r\n                        ({\r\n                          _id,\r\n                          sender,\r\n                          type,\r\n                          createdAt,\r\n                          isRead,\r\n                          post,\r\n                          connection,\r\n                        }) => (\r\n                          <div className=\"people_container d-flex flex-column flex-md-row justify-content-center align-items-center justify-content-md-between align-items-center\">\r\n                            <div className=\"short_desc d-flex align-items-center w-100 my-3 mx-5 p-0\">\r\n                              <img\r\n                                src={sender?.profilePicture}\r\n                                className=\"people_img rounded-circle\"\r\n                                alt=\"user Profile\"\r\n                                width={50}\r\n                                height={50}\r\n                              />\r\n                              <div className=\"d-flex flex-column justify-content-center px-2\">\r\n                                <h5>\r\n                                  <Link\r\n                                    to={\r\n                                      isInvestor\r\n                                        ? `/investor/user/${\r\n                                            sender?.firstName.toLowerCase() +\r\n                                            \"-\" +\r\n                                            sender?.lastName.toLowerCase()\r\n                                          }/${sender?.oneLinkId}`\r\n                                        : `/user/${\r\n                                            sender?.firstName.toLowerCase() +\r\n                                            \"-\" +\r\n                                            sender?.lastName.toLowerCase()\r\n                                          }/${sender?.oneLinkId}`\r\n                                    }\r\n                                    className=\"fw-bold\"\r\n                                  >\r\n                                    {sender?.firstName} {sender?.lastName}\r\n                                  </Link>{\" \"}\r\n                                </h5>\r\n                                <p className=\"m-0 text-secondary\">\r\n                                  {notificationType(type, post || connection)}\r\n                                </p>\r\n                              </div>\r\n                              {/* <img\r\n                                src={ThreeODotIcon}\r\n                                alt=\"ThreeODotIcon\"\r\n                                className=\"ms-auto px-2 \"\r\n                              /> */}\r\n                              <PiDotsThreeBold\r\n                                size={35}\r\n                                style={{ fill: \"var(--d-l-grey)\" }}\r\n                                className=\"ms-auto\"\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        )\r\n                      )}\r\n                  </>\r\n                ) : (\r\n                  <p className=\"text-center m-0\">No notifications</p>\r\n                )\r\n              ) : (\r\n                <SpinnerBS\r\n                  className=\"w-100 text-center py-5\"\r\n                  colorClass=\"d-l-grey\"\r\n                  spinnerSizeClass=\"md\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>{\" \"}\r\n        </div>\r\n      </div>\r\n    </MaxWidthWrapper>\r\n  );\r\n}\r\n\r\nexport default Notifications;\r\n"],"names":["dispatch","useDispatch","selectedTab","setSelectedTab","useState","loading","setLoading","notifications","setNotifications","loggedInUserId","useSelector","selectLoggedInUserId","isInvestor","selectIsInvestor","useEffect","document","title","setPageTitle","async","res","fetchNotificationsAPI","data","error","console","log","fetchNotifications","notificationType","type","_id","_jsxs","className","children","_jsx","Link","to","concat","MaxWidthWrapper","SpinnerBS","colorClass","spinnerSizeClass","length","_Fragment","map","_ref","sender","createdAt","isRead","post","connection","src","profilePicture","alt","width","height","firstName","toLowerCase","lastName","oneLinkId","PiDotsThreeBold","size","style","fill"],"sourceRoot":""}